package com.mobiddiction.fishsmart.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.mobiddiction.fishsmart.dao.Notification;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NOTIFICATION".
*/
public class NotificationDao extends AbstractDao<Notification, Void> {

    public static final String TABLENAME = "NOTIFICATION";

    /**
     * Properties of entity Notification.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property CreatedBy = new Property(0, String.class, "createdBy", false, "CREATED_BY");
        public final static Property CreatedDate = new Property(1, String.class, "createdDate", false, "CREATED_DATE");
        public final static Property LastModifiedBy = new Property(2, String.class, "lastModifiedBy", false, "LAST_MODIFIED_BY");
        public final static Property LastModifiedDate = new Property(3, String.class, "lastModifiedDate", false, "LAST_MODIFIED_DATE");
        public final static Property Id = new Property(4, String.class, "id", false, "ID");
        public final static Property NotifTitle = new Property(5, String.class, "notifTitle", false, "NOTIF_TITLE");
        public final static Property NotifText = new Property(6, String.class, "notifText", false, "NOTIF_TEXT");
        public final static Property NotifSound = new Property(7, String.class, "notifSound", false, "NOTIF_SOUND");
        public final static Property Push = new Property(8, String.class, "push", false, "PUSH");
        public final static Property Segment = new Property(9, String.class, "segment", false, "SEGMENT");
        public final static Property Beacon = new Property(10, String.class, "beacon", false, "BEACON");
        public final static Property Scheduled = new Property(11, String.class, "scheduled", false, "SCHEDULED");
        public final static Property Status = new Property(12, String.class, "status", false, "STATUS");
        public final static Property ResponseMessage = new Property(13, String.class, "responseMessage", false, "RESPONSE_MESSAGE");
        public final static Property Version = new Property(14, String.class, "version", false, "VERSION");
        public final static Property CallToAction = new Property(15, String.class, "callToAction", false, "CALL_TO_ACTION");
    }


    public NotificationDao(DaoConfig config) {
        super(config);
    }
    
    public NotificationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NOTIFICATION\" (" + //
                "\"CREATED_BY\" TEXT," + // 0: createdBy
                "\"CREATED_DATE\" TEXT," + // 1: createdDate
                "\"LAST_MODIFIED_BY\" TEXT," + // 2: lastModifiedBy
                "\"LAST_MODIFIED_DATE\" TEXT," + // 3: lastModifiedDate
                "\"ID\" TEXT," + // 4: id
                "\"NOTIF_TITLE\" TEXT," + // 5: notifTitle
                "\"NOTIF_TEXT\" TEXT," + // 6: notifText
                "\"NOTIF_SOUND\" TEXT," + // 7: notifSound
                "\"PUSH\" TEXT," + // 8: push
                "\"SEGMENT\" TEXT," + // 9: segment
                "\"BEACON\" TEXT," + // 10: beacon
                "\"SCHEDULED\" TEXT," + // 11: scheduled
                "\"STATUS\" TEXT," + // 12: status
                "\"RESPONSE_MESSAGE\" TEXT," + // 13: responseMessage
                "\"VERSION\" TEXT," + // 14: version
                "\"CALL_TO_ACTION\" TEXT);"); // 15: callToAction
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NOTIFICATION\"";
        db.execSQL(sql);
    }

    @Override
    protected void bindValues(DatabaseStatement stmt, Notification entity) {
        stmt.clearBindings();

        String createdBy = entity.getCreatedBy();
        if (createdBy != null) {
            stmt.bindString(1, createdBy);
        }

        String createdDate = entity.getCreatedDate();
        if (createdDate != null) {
            stmt.bindString(2, createdDate);
        }

        String lastModifiedBy = entity.getLastModifiedBy();
        if (lastModifiedBy != null) {
            stmt.bindString(3, lastModifiedBy);
        }

        String lastModifiedDate = entity.getLastModifiedDate();
        if (lastModifiedDate != null) {
            stmt.bindString(4, lastModifiedDate);
        }

        String id = entity.getId();
        if (id != null) {
            stmt.bindString(5, id);
        }

        String notifTitle = entity.getNotifTitle();
        if (notifTitle != null) {
            stmt.bindString(6, notifTitle);
        }

        String notifText = entity.getNotifText();
        if (notifText != null) {
            stmt.bindString(7, notifText);
        }

        String notifSound = entity.getNotifSound();
        if (notifSound != null) {
            stmt.bindString(8, notifSound);
        }

        String push = entity.getPush();
        if (push != null) {
            stmt.bindString(9, push);
        }

        String segment = entity.getSegment();
        if (segment != null) {
            stmt.bindString(10, segment);
        }

        String beacon = entity.getBeacon();
        if (beacon != null) {
            stmt.bindString(11, beacon);
        }

        String scheduled = entity.getScheduled();
        if (scheduled != null) {
            stmt.bindString(12, scheduled);
        }

        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(13, status);
        }

        String responseMessage = entity.getResponseMessage();
        if (responseMessage != null) {
            stmt.bindString(14, responseMessage);
        }

        String version = entity.getVersion();
        if (version != null) {
            stmt.bindString(15, version);
        }

        String callToAction = entity.getCallToAction();
        if (callToAction != null) {
            stmt.bindString(16, callToAction);
        }
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Notification entity) {
        stmt.clearBindings();
 
        String createdBy = entity.getCreatedBy();
        if (createdBy != null) {
            stmt.bindString(1, createdBy);
        }
 
        String createdDate = entity.getCreatedDate();
        if (createdDate != null) {
            stmt.bindString(2, createdDate);
        }
 
        String lastModifiedBy = entity.getLastModifiedBy();
        if (lastModifiedBy != null) {
            stmt.bindString(3, lastModifiedBy);
        }
 
        String lastModifiedDate = entity.getLastModifiedDate();
        if (lastModifiedDate != null) {
            stmt.bindString(4, lastModifiedDate);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(5, id);
        }
 
        String notifTitle = entity.getNotifTitle();
        if (notifTitle != null) {
            stmt.bindString(6, notifTitle);
        }
 
        String notifText = entity.getNotifText();
        if (notifText != null) {
            stmt.bindString(7, notifText);
        }
 
        String notifSound = entity.getNotifSound();
        if (notifSound != null) {
            stmt.bindString(8, notifSound);
        }
 
        String push = entity.getPush();
        if (push != null) {
            stmt.bindString(9, push);
        }
 
        String segment = entity.getSegment();
        if (segment != null) {
            stmt.bindString(10, segment);
        }
 
        String beacon = entity.getBeacon();
        if (beacon != null) {
            stmt.bindString(11, beacon);
        }
 
        String scheduled = entity.getScheduled();
        if (scheduled != null) {
            stmt.bindString(12, scheduled);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(13, status);
        }
 
        String responseMessage = entity.getResponseMessage();
        if (responseMessage != null) {
            stmt.bindString(14, responseMessage);
        }
 
        String version = entity.getVersion();
        if (version != null) {
            stmt.bindString(15, version);
        }
 
        String callToAction = entity.getCallToAction();
        if (callToAction != null) {
            stmt.bindString(16, callToAction);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public Notification readEntity(Cursor cursor, int offset) {
        Notification entity = new Notification( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // createdBy
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // createdDate
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // lastModifiedBy
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // lastModifiedDate
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // id
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // notifTitle
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // notifText
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // notifSound
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // push
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // segment
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // beacon
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // scheduled
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // status
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // responseMessage
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // version
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15) // callToAction
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Notification entity, int offset) {
        entity.setCreatedBy(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCreatedDate(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLastModifiedBy(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLastModifiedDate(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setNotifTitle(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setNotifText(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setNotifSound(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPush(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSegment(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setBeacon(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setScheduled(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setStatus(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setResponseMessage(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setVersion(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setCallToAction(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(Notification entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(Notification entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }

    @Override
    protected boolean hasKey(Notification entity) {
        return false;
    }
}
