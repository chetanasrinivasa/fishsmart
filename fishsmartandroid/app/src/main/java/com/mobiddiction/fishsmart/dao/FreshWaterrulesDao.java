package com.mobiddiction.fishsmart.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.mobiddiction.fishsmart.dao.FreshWaterrules;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FRESH_WATERRULES".
*/
public class FreshWaterrulesDao extends AbstractDao<FreshWaterrules, Void> {

    public static final String TABLENAME = "FRESH_WATERRULES";

    /**
     * Properties of entity FreshWaterrules.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Integer.class, "id", false, "ID");
        public final static Property FreshID = new Property(1, String.class, "FreshID", false, "FRESH_ID");
        public final static Property LegalSize = new Property(2, String.class, "legalSize", false, "LEGAL_SIZE");
        public final static Property BagLimit = new Property(3, String.class, "bagLimit", false, "BAG_LIMIT");
        public final static Property Possession = new Property(4, String.class, "possession", false, "POSSESSION");
        public final static Property RuleBagLimit = new Property(5, String.class, "ruleBagLimit", false, "RULE_BAG_LIMIT");
    }


    public FreshWaterrulesDao(DaoConfig config) {
        super(config);
    }
    
    public FreshWaterrulesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FRESH_WATERRULES\" (" + //
                "\"ID\" INTEGER," + // 0: id
                "\"FRESH_ID\" TEXT," + // 1: FreshID
                "\"LEGAL_SIZE\" TEXT," + // 2: legalSize
                "\"BAG_LIMIT\" TEXT," + // 3: bagLimit
                "\"POSSESSION\" TEXT," + // 4: possession
                "\"RULE_BAG_LIMIT\" TEXT);"); // 5: ruleBagLimit
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FRESH_WATERRULES\"";
        db.execSQL(sql);
    }

    @Override
    protected void bindValues(DatabaseStatement stmt, FreshWaterrules entity) {
        stmt.clearBindings();

        Integer id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String FreshID = entity.getFreshID();
        if (FreshID != null) {
            stmt.bindString(2, FreshID);
        }

        String legalSize = entity.getLegalSize();
        if (legalSize != null) {
            stmt.bindString(3, legalSize);
        }

        String bagLimit = entity.getBagLimit();
        if (bagLimit != null) {
            stmt.bindString(4, bagLimit);
        }

        String possession = entity.getPossession();
        if (possession != null) {
            stmt.bindString(5, possession);
        }

        String ruleBagLimit = entity.getRuleBagLimit();
        if (ruleBagLimit != null) {
            stmt.bindString(6, ruleBagLimit);
        }
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, FreshWaterrules entity) {
        stmt.clearBindings();
 
        Integer id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String FreshID = entity.getFreshID();
        if (FreshID != null) {
            stmt.bindString(2, FreshID);
        }
 
        String legalSize = entity.getLegalSize();
        if (legalSize != null) {
            stmt.bindString(3, legalSize);
        }
 
        String bagLimit = entity.getBagLimit();
        if (bagLimit != null) {
            stmt.bindString(4, bagLimit);
        }
 
        String possession = entity.getPossession();
        if (possession != null) {
            stmt.bindString(5, possession);
        }
 
        String ruleBagLimit = entity.getRuleBagLimit();
        if (ruleBagLimit != null) {
            stmt.bindString(6, ruleBagLimit);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public FreshWaterrules readEntity(Cursor cursor, int offset) {
        FreshWaterrules entity = new FreshWaterrules( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // FreshID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // legalSize
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // bagLimit
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // possession
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // ruleBagLimit
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, FreshWaterrules entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setFreshID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLegalSize(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBagLimit(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPossession(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRuleBagLimit(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(FreshWaterrules entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(FreshWaterrules entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }

    @Override
    protected boolean hasKey(FreshWaterrules entity) {
        return false;
    }
}
