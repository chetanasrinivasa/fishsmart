package com.mobiddiction.fishsmart.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.mobiddiction.fishsmart.dao.NewMapData;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NEW_MAP_DATA".
*/
public class NewMapDataDao extends AbstractDao<NewMapData, Void> {

    public static final String TABLENAME = "NEW_MAP_DATA";

    /**
     * Properties of entity NewMapData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", false, "ID");
        public final static Property Title = new Property(1, String.class, "Title", false, "TITLE");
        public final static Property Description = new Property(2, String.class, "description", false, "DESCRIPTION");
        public final static Property Color = new Property(3, String.class, "color", false, "COLOR");
        public final static Property MapType = new Property(4, String.class, "mapType", false, "MAP_TYPE");
        public final static Property Zoom = new Property(5, Double.class, "zoom", false, "ZOOM");
        public final static Property TopLeftLat = new Property(6, Double.class, "topLeftLat", false, "TOP_LEFT_LAT");
        public final static Property TopLeftLon = new Property(7, Double.class, "topLeftLon", false, "TOP_LEFT_LON");
        public final static Property BottomRightLat = new Property(8, Double.class, "bottomRightLat", false, "BOTTOM_RIGHT_LAT");
        public final static Property BottomRightLon = new Property(9, Double.class, "bottomRightLon", false, "BOTTOM_RIGHT_LON");
    }


    public NewMapDataDao(DaoConfig config) {
        super(config);
    }
    
    public NewMapDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NEW_MAP_DATA\" (" + //
                "\"ID\" TEXT," + // 0: id
                "\"TITLE\" TEXT," + // 1: Title
                "\"DESCRIPTION\" TEXT," + // 2: description
                "\"COLOR\" TEXT," + // 3: color
                "\"MAP_TYPE\" TEXT," + // 4: mapType
                "\"ZOOM\" REAL," + // 5: zoom
                "\"TOP_LEFT_LAT\" REAL," + // 6: topLeftLat
                "\"TOP_LEFT_LON\" REAL," + // 7: topLeftLon
                "\"BOTTOM_RIGHT_LAT\" REAL," + // 8: bottomRightLat
                "\"BOTTOM_RIGHT_LON\" REAL);"); // 9: bottomRightLon
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NEW_MAP_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected void bindValues(DatabaseStatement stmt, NewMapData entity) {
        stmt.clearBindings();

        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }

        String Title = entity.getTitle();
        if (Title != null) {
            stmt.bindString(2, Title);
        }

        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(3, description);
        }

        String color = entity.getColor();
        if (color != null) {
            stmt.bindString(4, color);
        }

        String mapType = entity.getMapType();
        if (mapType != null) {
            stmt.bindString(5, mapType.replaceAll("\\s+",""));
        }

        Double zoom = entity.getZoom();
        if (zoom != null) {
            stmt.bindDouble(6, zoom);
        }

        Double topLeftLat = entity.getTopLeftLat();
        if (topLeftLat != null) {
            stmt.bindDouble(7, topLeftLat);
        }

        Double topLeftLon = entity.getTopLeftLon();
        if (topLeftLon != null) {
            stmt.bindDouble(8, topLeftLon);
        }

        Double bottomRightLat = entity.getBottomRightLat();
        if (bottomRightLat != null) {
            stmt.bindDouble(9, bottomRightLat);
        }

        Double bottomRightLon = entity.getBottomRightLon();
        if (bottomRightLon != null) {
            stmt.bindDouble(10, bottomRightLon);
        }
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, NewMapData entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String Title = entity.getTitle();
        if (Title != null) {
            stmt.bindString(2, Title);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(3, description);
        }
 
        String color = entity.getColor();
        if (color != null) {
            stmt.bindString(4, color);
        }
 
        String mapType = entity.getMapType();
        if (mapType != null) {
            stmt.bindString(5, mapType.replaceAll("\\s+",""));
        }
 
        Double zoom = entity.getZoom();
        if (zoom != null) {
            stmt.bindDouble(6, zoom);
        }
 
        Double topLeftLat = entity.getTopLeftLat();
        if (topLeftLat != null) {
            stmt.bindDouble(7, topLeftLat);
        }
 
        Double topLeftLon = entity.getTopLeftLon();
        if (topLeftLon != null) {
            stmt.bindDouble(8, topLeftLon);
        }
 
        Double bottomRightLat = entity.getBottomRightLat();
        if (bottomRightLat != null) {
            stmt.bindDouble(9, bottomRightLat);
        }
 
        Double bottomRightLon = entity.getBottomRightLon();
        if (bottomRightLon != null) {
            stmt.bindDouble(10, bottomRightLon);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public NewMapData readEntity(Cursor cursor, int offset) {
        NewMapData entity = new NewMapData( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // description
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // color
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // mapType
            cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5), // zoom
            cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6), // topLeftLat
            cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7), // topLeftLon
            cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8), // bottomRightLat
            cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9) // bottomRightLon
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, NewMapData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDescription(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setColor(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMapType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setZoom(cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5));
        entity.setTopLeftLat(cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6));
        entity.setTopLeftLon(cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7));
        entity.setBottomRightLat(cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8));
        entity.setBottomRightLon(cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(NewMapData entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(NewMapData entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }

    @Override
    protected boolean hasKey(NewMapData entity) {
        return false;
    }
}
