package com.mobiddiction.fishsmart.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.mobiddiction.fishsmart.dao.NewMapPinsLatLonData;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NEW_MAP_PINS_LAT_LON_DATA".
*/
public class NewMapPinsLatLonDataDao extends AbstractDao<NewMapPinsLatLonData, Void> {

    public static final String TABLENAME = "NEW_MAP_PINS_LAT_LON_DATA";

    /**
     * Properties of entity NewMapPinsLatLonData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", false, "ID");
        public final static Property Lat = new Property(1, Double.class, "lat", false, "LAT");
        public final static Property Zoom = new Property(2, Integer.class, "zoom", false, "ZOOM");
        public final static Property Lon = new Property(3, Double.class, "lon", false, "LON");
    }


    public NewMapPinsLatLonDataDao(DaoConfig config) {
        super(config);
    }
    
    public NewMapPinsLatLonDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NEW_MAP_PINS_LAT_LON_DATA\" (" + //
                "\"ID\" TEXT," + // 0: id
                "\"LAT\" REAL," + // 1: lat
                "\"ZOOM\" INTEGER," + // 2: zoom
                "\"LON\" REAL);"); // 3: lon
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NEW_MAP_PINS_LAT_LON_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected void bindValues(DatabaseStatement stmt, NewMapPinsLatLonData entity) {
        stmt.clearBindings();

        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }

        Double lat = entity.getLat();
        if (lat != null) {
            stmt.bindDouble(2, lat);
        }

        Integer zoom = entity.getZoom();
        if (zoom != null) {
            stmt.bindLong(3, zoom);
        }

        Double lon = entity.getLon();
        if (lon != null) {
            stmt.bindDouble(4, lon);
        }
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, NewMapPinsLatLonData entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        Double lat = entity.getLat();
        if (lat != null) {
            stmt.bindDouble(2, lat);
        }
 
        Integer zoom = entity.getZoom();
        if (zoom != null) {
            stmt.bindLong(3, zoom);
        }
 
        Double lon = entity.getLon();
        if (lon != null) {
            stmt.bindDouble(4, lon);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public NewMapPinsLatLonData readEntity(Cursor cursor, int offset) {
        NewMapPinsLatLonData entity = new NewMapPinsLatLonData( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getDouble(offset + 1), // lat
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // zoom
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3) // lon
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, NewMapPinsLatLonData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setLat(cursor.isNull(offset + 1) ? null : cursor.getDouble(offset + 1));
        entity.setZoom(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setLon(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(NewMapPinsLatLonData entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(NewMapPinsLatLonData entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }

    @Override
    protected boolean hasKey(NewMapPinsLatLonData entity) {
        return false;
    }
}
