package com.mobiddiction.fishsmart.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.mobiddiction.fishsmart.dao.LoginResponse;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOGIN_RESPONSE".
*/
public class LoginResponseDao extends AbstractDao<LoginResponse, Void> {

    public static final String TABLENAME = "LOGIN_RESPONSE";

    /**
     * Properties of entity LoginResponse.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Authorization = new Property(0, String.class, "Authorization", false, "AUTHORIZATION");
        public final static Property UserId = new Property(1, String.class, "userId", false, "USER_ID");
        public final static Property ChangePassword = new Property(2, String.class, "changePassword", false, "CHANGE_PASSWORD");
        public final static Property TermsAccepted = new Property(3, String.class, "termsAccepted", false, "TERMS_ACCEPTED");
    }


    public LoginResponseDao(DaoConfig config) {
        super(config);
    }
    
    public LoginResponseDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOGIN_RESPONSE\" (" + //
                "\"AUTHORIZATION\" TEXT," + // 0: Authorization
                "\"USER_ID\" TEXT," + // 1: userId
                "\"CHANGE_PASSWORD\" TEXT," + // 2: changePassword
                "\"TERMS_ACCEPTED\" TEXT);"); // 3: termsAccepted
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOGIN_RESPONSE\"";
        db.execSQL(sql);
    }

    @Override
    protected void bindValues(DatabaseStatement stmt, LoginResponse entity) {
        stmt.clearBindings();

        String Authorization = entity.getAuthorization();
        if (Authorization != null) {
            stmt.bindString(1, Authorization);
        }

        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }

        String changePassword = entity.getChangePassword();
        if (changePassword != null) {
            stmt.bindString(3, changePassword);
        }

        String termsAccepted = entity.getTermsAccepted();
        if (termsAccepted != null) {
            stmt.bindString(4, termsAccepted);
        }
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, LoginResponse entity) {
        stmt.clearBindings();
 
        String Authorization = entity.getAuthorization();
        if (Authorization != null) {
            stmt.bindString(1, Authorization);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String changePassword = entity.getChangePassword();
        if (changePassword != null) {
            stmt.bindString(3, changePassword);
        }
 
        String termsAccepted = entity.getTermsAccepted();
        if (termsAccepted != null) {
            stmt.bindString(4, termsAccepted);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public LoginResponse readEntity(Cursor cursor, int offset) {
        LoginResponse entity = new LoginResponse( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // Authorization
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // changePassword
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // termsAccepted
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, LoginResponse entity, int offset) {
        entity.setAuthorization(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setChangePassword(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTermsAccepted(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(LoginResponse entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(LoginResponse entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }

    @Override
    protected boolean hasKey(LoginResponse entity) {
        return false;
    }
}
