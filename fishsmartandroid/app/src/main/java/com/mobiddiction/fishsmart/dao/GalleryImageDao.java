package com.mobiddiction.fishsmart.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.mobiddiction.fishsmart.dao.GalleryImage;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GALLERY_IMAGE".
*/
public class GalleryImageDao extends AbstractDao<GalleryImage, Void> {

    public static final String TABLENAME = "GALLERY_IMAGE";

    /**
     * Properties of entity GalleryImage.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property CreatedBy = new Property(0, String.class, "createdBy", false, "CREATED_BY");
        public final static Property CreatedDate = new Property(1, String.class, "createdDate", false, "CREATED_DATE");
        public final static Property LastModifiedDate = new Property(2, String.class, "lastModifiedDate", false, "LAST_MODIFIED_DATE");
        public final static Property Id = new Property(3, String.class, "id", false, "ID");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property State = new Property(5, String.class, "state", false, "STATE");
        public final static Property Url = new Property(6, String.class, "url", false, "URL");
        public final static Property Favourite = new Property(7, String.class, "favourite", false, "FAVOURITE");
        public final static Property Deleted = new Property(8, String.class, "deleted", false, "DELETED");
        public final static Property ClientId = new Property(9, String.class, "clientId", false, "CLIENT_ID");
        public final static Property UserId = new Property(10, String.class, "userId", false, "USER_ID");
        public final static Property NewsId = new Property(11, String.class, "newsId", false, "NEWS_ID");
        public final static Property EventId = new Property(12, String.class, "eventId", false, "EVENT_ID");
        public final static Property DriverId = new Property(13, String.class, "driverId", false, "DRIVER_ID");
        public final static Property GalleryId = new Property(14, String.class, "galleryId", false, "GALLERY_ID");
        public final static Property JobId = new Property(15, String.class, "jobId", false, "JOB_ID");
        public final static Property CatchId = new Property(16, String.class, "catchId", false, "CATCH_ID");
        public final static Property Note = new Property(17, String.class, "note", false, "NOTE");
        public final static Property Expiry = new Property(18, String.class, "expiry", false, "EXPIRY");
        public final static Property Profile = new Property(19, String.class, "profile", false, "PROFILE");
    }


    public GalleryImageDao(DaoConfig config) {
        super(config);
    }
    
    public GalleryImageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GALLERY_IMAGE\" (" + //
                "\"CREATED_BY\" TEXT," + // 0: createdBy
                "\"CREATED_DATE\" TEXT," + // 1: createdDate
                "\"LAST_MODIFIED_DATE\" TEXT," + // 2: lastModifiedDate
                "\"ID\" TEXT," + // 3: id
                "\"NAME\" TEXT," + // 4: name
                "\"STATE\" TEXT," + // 5: state
                "\"URL\" TEXT," + // 6: url
                "\"FAVOURITE\" TEXT," + // 7: favourite
                "\"DELETED\" TEXT," + // 8: deleted
                "\"CLIENT_ID\" TEXT," + // 9: clientId
                "\"USER_ID\" TEXT," + // 10: userId
                "\"NEWS_ID\" TEXT," + // 11: newsId
                "\"EVENT_ID\" TEXT," + // 12: eventId
                "\"DRIVER_ID\" TEXT," + // 13: driverId
                "\"GALLERY_ID\" TEXT," + // 14: galleryId
                "\"JOB_ID\" TEXT," + // 15: jobId
                "\"CATCH_ID\" TEXT," + // 16: catchId
                "\"NOTE\" TEXT," + // 17: note
                "\"EXPIRY\" TEXT," + // 18: expiry
                "\"PROFILE\" TEXT);"); // 19: profile
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GALLERY_IMAGE\"";
        db.execSQL(sql);
    }

    @Override
    protected void bindValues(DatabaseStatement stmt, GalleryImage entity) {
        stmt.clearBindings();

        String createdBy = entity.getCreatedBy();
        if (createdBy != null) {
            stmt.bindString(1, createdBy);
        }

        String createdDate = entity.getCreatedDate();
        if (createdDate != null) {
            stmt.bindString(2, createdDate);
        }

        String lastModifiedDate = entity.getLastModifiedDate();
        if (lastModifiedDate != null) {
            stmt.bindString(3, lastModifiedDate);
        }

        String id = entity.getId();
        if (id != null) {
            stmt.bindString(4, id);
        }

        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }

        String state = entity.getState();
        if (state != null) {
            stmt.bindString(6, state);
        }

        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(7, url);
        }

        String favourite = entity.getFavourite();
        if (favourite != null) {
            stmt.bindString(8, favourite);
        }

        String deleted = entity.getDeleted();
        if (deleted != null) {
            stmt.bindString(9, deleted);
        }

        String clientId = entity.getClientId();
        if (clientId != null) {
            stmt.bindString(10, clientId);
        }

        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(11, userId);
        }

        String newsId = entity.getNewsId();
        if (newsId != null) {
            stmt.bindString(12, newsId);
        }

        String eventId = entity.getEventId();
        if (eventId != null) {
            stmt.bindString(13, eventId);
        }

        String driverId = entity.getDriverId();
        if (driverId != null) {
            stmt.bindString(14, driverId);
        }

        String galleryId = entity.getGalleryId();
        if (galleryId != null) {
            stmt.bindString(15, galleryId);
        }

        String jobId = entity.getJobId();
        if (jobId != null) {
            stmt.bindString(16, jobId);
        }

        String catchId = entity.getCatchId();
        if (catchId != null) {
            stmt.bindString(17, catchId);
        }

        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(18, note);
        }

        String expiry = entity.getExpiry();
        if (expiry != null) {
            stmt.bindString(19, expiry);
        }

        String profile = entity.getProfile();
        if (profile != null) {
            stmt.bindString(20, profile);
        }
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, GalleryImage entity) {
        stmt.clearBindings();
 
        String createdBy = entity.getCreatedBy();
        if (createdBy != null) {
            stmt.bindString(1, createdBy);
        }
 
        String createdDate = entity.getCreatedDate();
        if (createdDate != null) {
            stmt.bindString(2, createdDate);
        }
 
        String lastModifiedDate = entity.getLastModifiedDate();
        if (lastModifiedDate != null) {
            stmt.bindString(3, lastModifiedDate);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(4, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        String state = entity.getState();
        if (state != null) {
            stmt.bindString(6, state);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(7, url);
        }
 
        String favourite = entity.getFavourite();
        if (favourite != null) {
            stmt.bindString(8, favourite);
        }
 
        String deleted = entity.getDeleted();
        if (deleted != null) {
            stmt.bindString(9, deleted);
        }
 
        String clientId = entity.getClientId();
        if (clientId != null) {
            stmt.bindString(10, clientId);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(11, userId);
        }
 
        String newsId = entity.getNewsId();
        if (newsId != null) {
            stmt.bindString(12, newsId);
        }
 
        String eventId = entity.getEventId();
        if (eventId != null) {
            stmt.bindString(13, eventId);
        }
 
        String driverId = entity.getDriverId();
        if (driverId != null) {
            stmt.bindString(14, driverId);
        }
 
        String galleryId = entity.getGalleryId();
        if (galleryId != null) {
            stmt.bindString(15, galleryId);
        }
 
        String jobId = entity.getJobId();
        if (jobId != null) {
            stmt.bindString(16, jobId);
        }
 
        String catchId = entity.getCatchId();
        if (catchId != null) {
            stmt.bindString(17, catchId);
        }
 
        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(18, note);
        }
 
        String expiry = entity.getExpiry();
        if (expiry != null) {
            stmt.bindString(19, expiry);
        }
 
        String profile = entity.getProfile();
        if (profile != null) {
            stmt.bindString(20, profile);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public GalleryImage readEntity(Cursor cursor, int offset) {
        GalleryImage entity = new GalleryImage( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // createdBy
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // createdDate
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // lastModifiedDate
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // id
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // name
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // state
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // url
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // favourite
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // deleted
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // clientId
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // userId
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // newsId
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // eventId
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // driverId
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // galleryId
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // jobId
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // catchId
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // note
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // expiry
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19) // profile
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, GalleryImage entity, int offset) {
        entity.setCreatedBy(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCreatedDate(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLastModifiedDate(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setState(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUrl(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFavourite(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDeleted(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setClientId(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setUserId(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setNewsId(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setEventId(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setDriverId(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setGalleryId(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setJobId(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setCatchId(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setNote(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setExpiry(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setProfile(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(GalleryImage entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(GalleryImage entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }

    @Override
    protected boolean hasKey(GalleryImage entity) {
        return false;
    }
}
