package com.mobiddiction.fishsmart.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.mobiddiction.fishsmart.dao.DeviceData;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DEVICE_DATA".
*/
public class DeviceDataDao extends AbstractDao<DeviceData, Void> {

    public static final String TABLENAME = "DEVICE_DATA";

    /**
     * Properties of entity DeviceData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", false, "ID");
        public final static Property Udid = new Property(1, String.class, "udid", false, "UDID");
        public final static Property DeviceToken = new Property(2, String.class, "deviceToken", false, "DEVICE_TOKEN");
        public final static Property DeviceName = new Property(3, String.class, "deviceName", false, "DEVICE_NAME");
        public final static Property DeviceOS = new Property(4, String.class, "deviceOS", false, "DEVICE_OS");
        public final static Property DeviceType = new Property(5, String.class, "deviceType", false, "DEVICE_TYPE");
        public final static Property AppVersion = new Property(6, String.class, "appVersion", false, "APP_VERSION");
        public final static Property Active = new Property(7, String.class, "active", false, "ACTIVE");
        public final static Property PushNotifications = new Property(8, String.class, "pushNotifications", false, "PUSH_NOTIFICATIONS");
        public final static Property AwsEndpoint = new Property(9, String.class, "awsEndpoint", false, "AWS_ENDPOINT");
        public final static Property User = new Property(10, String.class, "user", false, "USER");
        public final static Property Version = new Property(11, String.class, "version", false, "VERSION");
    }


    public DeviceDataDao(DaoConfig config) {
        super(config);
    }
    
    public DeviceDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DEVICE_DATA\" (" + //
                "\"ID\" TEXT," + // 0: id
                "\"UDID\" TEXT," + // 1: udid
                "\"DEVICE_TOKEN\" TEXT," + // 2: deviceToken
                "\"DEVICE_NAME\" TEXT," + // 3: deviceName
                "\"DEVICE_OS\" TEXT," + // 4: deviceOS
                "\"DEVICE_TYPE\" TEXT," + // 5: deviceType
                "\"APP_VERSION\" TEXT," + // 6: appVersion
                "\"ACTIVE\" TEXT," + // 7: active
                "\"PUSH_NOTIFICATIONS\" TEXT," + // 8: pushNotifications
                "\"AWS_ENDPOINT\" TEXT," + // 9: awsEndpoint
                "\"USER\" TEXT," + // 10: user
                "\"VERSION\" TEXT);"); // 11: version
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DEVICE_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected void bindValues(DatabaseStatement stmt, DeviceData entity) {
        stmt.clearBindings();

        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }

        String udid = entity.getUdid();
        if (udid != null) {
            stmt.bindString(2, udid);
        }

        String deviceToken = entity.getDeviceToken();
        if (deviceToken != null) {
            stmt.bindString(3, deviceToken);
        }

        String deviceName = entity.getDeviceName();
        if (deviceName != null) {
            stmt.bindString(4, deviceName);
        }

        String deviceOS = entity.getDeviceOS();
        if (deviceOS != null) {
            stmt.bindString(5, deviceOS);
        }

        String deviceType = entity.getDeviceType();
        if (deviceType != null) {
            stmt.bindString(6, deviceType);
        }

        String appVersion = entity.getAppVersion();
        if (appVersion != null) {
            stmt.bindString(7, appVersion);
        }

        String active = entity.getActive();
        if (active != null) {
            stmt.bindString(8, active);
        }

        String pushNotifications = entity.getPushNotifications();
        if (pushNotifications != null) {
            stmt.bindString(9, pushNotifications);
        }

        String awsEndpoint = entity.getAwsEndpoint();
        if (awsEndpoint != null) {
            stmt.bindString(10, awsEndpoint);
        }

        String user = entity.getUser();
        if (user != null) {
            stmt.bindString(11, user);
        }

        String version = entity.getVersion();
        if (version != null) {
            stmt.bindString(12, version);
        }
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DeviceData entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String udid = entity.getUdid();
        if (udid != null) {
            stmt.bindString(2, udid);
        }
 
        String deviceToken = entity.getDeviceToken();
        if (deviceToken != null) {
            stmt.bindString(3, deviceToken);
        }
 
        String deviceName = entity.getDeviceName();
        if (deviceName != null) {
            stmt.bindString(4, deviceName);
        }
 
        String deviceOS = entity.getDeviceOS();
        if (deviceOS != null) {
            stmt.bindString(5, deviceOS);
        }
 
        String deviceType = entity.getDeviceType();
        if (deviceType != null) {
            stmt.bindString(6, deviceType);
        }
 
        String appVersion = entity.getAppVersion();
        if (appVersion != null) {
            stmt.bindString(7, appVersion);
        }
 
        String active = entity.getActive();
        if (active != null) {
            stmt.bindString(8, active);
        }
 
        String pushNotifications = entity.getPushNotifications();
        if (pushNotifications != null) {
            stmt.bindString(9, pushNotifications);
        }
 
        String awsEndpoint = entity.getAwsEndpoint();
        if (awsEndpoint != null) {
            stmt.bindString(10, awsEndpoint);
        }
 
        String user = entity.getUser();
        if (user != null) {
            stmt.bindString(11, user);
        }
 
        String version = entity.getVersion();
        if (version != null) {
            stmt.bindString(12, version);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public DeviceData readEntity(Cursor cursor, int offset) {
        DeviceData entity = new DeviceData( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // udid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // deviceToken
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // deviceName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // deviceOS
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // deviceType
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // appVersion
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // active
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // pushNotifications
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // awsEndpoint
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // user
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // version
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DeviceData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUdid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDeviceToken(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDeviceName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDeviceOS(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDeviceType(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAppVersion(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setActive(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPushNotifications(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setAwsEndpoint(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setUser(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setVersion(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(DeviceData entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(DeviceData entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }

    @Override
    protected boolean hasKey(DeviceData entity) {
        return false;
    }
}
