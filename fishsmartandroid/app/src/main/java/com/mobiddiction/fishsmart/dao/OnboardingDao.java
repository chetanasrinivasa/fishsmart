package com.mobiddiction.fishsmart.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.mobiddiction.fishsmart.dao.Onboarding;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ONBOARDING".
*/
public class OnboardingDao extends AbstractDao<Onboarding, Void> {

    public static final String TABLENAME = "ONBOARDING";

    /**
     * Properties of entity Onboarding.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property CreatedBy = new Property(0, String.class, "createdBy", false, "CREATED_BY");
        public final static Property CreatedDate = new Property(1, String.class, "createdDate", false, "CREATED_DATE");
        public final static Property LastModifiedBy = new Property(2, String.class, "lastModifiedBy", false, "LAST_MODIFIED_BY");
        public final static Property LastModifiedDate = new Property(3, String.class, "lastModifiedDate", false, "LAST_MODIFIED_DATE");
        public final static Property Id = new Property(4, String.class, "id", false, "ID");
        public final static Property Headline = new Property(5, String.class, "headline", false, "HEADLINE");
        public final static Property ShortDescription = new Property(6, String.class, "shortDescription", false, "SHORT_DESCRIPTION");
        public final static Property ImageId = new Property(7, String.class, "imageId", false, "IMAGE_ID");
        public final static Property ImageURL = new Property(8, String.class, "imageURL", false, "IMAGE_URL");
        public final static Property VideoURL = new Property(9, String.class, "videoURL", false, "VIDEO_URL");
        public final static Property ExternalURL = new Property(10, String.class, "externalURL", false, "EXTERNAL_URL");
        public final static Property Enabled = new Property(11, String.class, "enabled", false, "ENABLED");
        public final static Property Featured = new Property(12, String.class, "featured", false, "FEATURED");
        public final static Property BackgroundImageId = new Property(13, String.class, "backgroundImageId", false, "BACKGROUND_IMAGE_ID");
        public final static Property BackgroundImageURL = new Property(14, String.class, "backgroundImageURL", false, "BACKGROUND_IMAGE_URL");
        public final static Property BackgroundColor = new Property(15, String.class, "backgroundColor", false, "BACKGROUND_COLOR");
    }


    public OnboardingDao(DaoConfig config) {
        super(config);
    }
    
    public OnboardingDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ONBOARDING\" (" + //
                "\"CREATED_BY\" TEXT," + // 0: createdBy
                "\"CREATED_DATE\" TEXT," + // 1: createdDate
                "\"LAST_MODIFIED_BY\" TEXT," + // 2: lastModifiedBy
                "\"LAST_MODIFIED_DATE\" TEXT," + // 3: lastModifiedDate
                "\"ID\" TEXT," + // 4: id
                "\"HEADLINE\" TEXT," + // 5: headline
                "\"SHORT_DESCRIPTION\" TEXT," + // 6: shortDescription
                "\"IMAGE_ID\" TEXT," + // 7: imageId
                "\"IMAGE_URL\" TEXT," + // 8: imageURL
                "\"VIDEO_URL\" TEXT," + // 9: videoURL
                "\"EXTERNAL_URL\" TEXT," + // 10: externalURL
                "\"ENABLED\" TEXT," + // 11: enabled
                "\"FEATURED\" TEXT," + // 12: featured
                "\"BACKGROUND_IMAGE_ID\" TEXT," + // 13: backgroundImageId
                "\"BACKGROUND_IMAGE_URL\" TEXT," + // 14: backgroundImageURL
                "\"BACKGROUND_COLOR\" TEXT);"); // 15: backgroundColor
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ONBOARDING\"";
        db.execSQL(sql);
    }

    @Override
    protected void bindValues(DatabaseStatement stmt, Onboarding entity) {
        stmt.clearBindings();

        String createdBy = entity.getCreatedBy();
        if (createdBy != null) {
            stmt.bindString(1, createdBy);
        }

        String createdDate = entity.getCreatedDate();
        if (createdDate != null) {
            stmt.bindString(2, createdDate);
        }

        String lastModifiedBy = entity.getLastModifiedBy();
        if (lastModifiedBy != null) {
            stmt.bindString(3, lastModifiedBy);
        }

        String lastModifiedDate = entity.getLastModifiedDate();
        if (lastModifiedDate != null) {
            stmt.bindString(4, lastModifiedDate);
        }

        String id = entity.getId();
        if (id != null) {
            stmt.bindString(5, id);
        }

        String headline = entity.getHeadline();
        if (headline != null) {
            stmt.bindString(6, headline);
        }

        String shortDescription = entity.getShortDescription();
        if (shortDescription != null) {
            stmt.bindString(7, shortDescription);
        }

        String imageId = entity.getImageId();
        if (imageId != null) {
            stmt.bindString(8, imageId);
        }

        String imageURL = entity.getImageURL();
        if (imageURL != null) {
            stmt.bindString(9, imageURL);
        }

        String videoURL = entity.getVideoURL();
        if (videoURL != null) {
            stmt.bindString(10, videoURL);
        }

        String externalURL = entity.getExternalURL();
        if (externalURL != null) {
            stmt.bindString(11, externalURL);
        }

        String enabled = entity.getEnabled();
        if (enabled != null) {
            stmt.bindString(12, enabled);
        }

        String featured = entity.getFeatured();
        if (featured != null) {
            stmt.bindString(13, featured);
        }

        String backgroundImageId = entity.getBackgroundImageId();
        if (backgroundImageId != null) {
            stmt.bindString(14, backgroundImageId);
        }

        String backgroundImageURL = entity.getBackgroundImageURL();
        if (backgroundImageURL != null) {
            stmt.bindString(15, backgroundImageURL);
        }

        String backgroundColor = entity.getBackgroundColor();
        if (backgroundColor != null) {
            stmt.bindString(16, backgroundColor);
        }
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Onboarding entity) {
        stmt.clearBindings();
 
        String createdBy = entity.getCreatedBy();
        if (createdBy != null) {
            stmt.bindString(1, createdBy);
        }
 
        String createdDate = entity.getCreatedDate();
        if (createdDate != null) {
            stmt.bindString(2, createdDate);
        }
 
        String lastModifiedBy = entity.getLastModifiedBy();
        if (lastModifiedBy != null) {
            stmt.bindString(3, lastModifiedBy);
        }
 
        String lastModifiedDate = entity.getLastModifiedDate();
        if (lastModifiedDate != null) {
            stmt.bindString(4, lastModifiedDate);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(5, id);
        }
 
        String headline = entity.getHeadline();
        if (headline != null) {
            stmt.bindString(6, headline);
        }
 
        String shortDescription = entity.getShortDescription();
        if (shortDescription != null) {
            stmt.bindString(7, shortDescription);
        }
 
        String imageId = entity.getImageId();
        if (imageId != null) {
            stmt.bindString(8, imageId);
        }
 
        String imageURL = entity.getImageURL();
        if (imageURL != null) {
            stmt.bindString(9, imageURL);
        }
 
        String videoURL = entity.getVideoURL();
        if (videoURL != null) {
            stmt.bindString(10, videoURL);
        }
 
        String externalURL = entity.getExternalURL();
        if (externalURL != null) {
            stmt.bindString(11, externalURL);
        }
 
        String enabled = entity.getEnabled();
        if (enabled != null) {
            stmt.bindString(12, enabled);
        }
 
        String featured = entity.getFeatured();
        if (featured != null) {
            stmt.bindString(13, featured);
        }
 
        String backgroundImageId = entity.getBackgroundImageId();
        if (backgroundImageId != null) {
            stmt.bindString(14, backgroundImageId);
        }
 
        String backgroundImageURL = entity.getBackgroundImageURL();
        if (backgroundImageURL != null) {
            stmt.bindString(15, backgroundImageURL);
        }
 
        String backgroundColor = entity.getBackgroundColor();
        if (backgroundColor != null) {
            stmt.bindString(16, backgroundColor);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public Onboarding readEntity(Cursor cursor, int offset) {
        Onboarding entity = new Onboarding( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // createdBy
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // createdDate
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // lastModifiedBy
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // lastModifiedDate
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // id
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // headline
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // shortDescription
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // imageId
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // imageURL
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // videoURL
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // externalURL
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // enabled
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // featured
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // backgroundImageId
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // backgroundImageURL
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15) // backgroundColor
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Onboarding entity, int offset) {
        entity.setCreatedBy(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCreatedDate(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLastModifiedBy(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLastModifiedDate(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setHeadline(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setShortDescription(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setImageId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setImageURL(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setVideoURL(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setExternalURL(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setEnabled(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setFeatured(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setBackgroundImageId(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setBackgroundImageURL(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setBackgroundColor(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(Onboarding entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(Onboarding entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }

    @Override
    protected boolean hasKey(Onboarding entity) {
        return false;
    }
}
