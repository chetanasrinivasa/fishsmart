package com.mobiddiction.fishsmart.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.mobiddiction.fishsmart.dao.SaltWaterfishFacts;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SALT_WATERFISH_FACTS".
*/
public class SaltWaterfishFactsDao extends AbstractDao<SaltWaterfishFacts, Void> {

    public static final String TABLENAME = "SALT_WATERFISH_FACTS";

    /**
     * Properties of entity SaltWaterfishFacts.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property SaltID = new Property(0, String.class, "SaltID", false, "SALT_ID");
        public final static Property Id = new Property(1, Integer.class, "id", false, "ID");
        public final static Property About = new Property(2, String.class, "about", false, "ABOUT");
        public final static Property Size = new Property(3, String.class, "size", false, "SIZE");
        public final static Property ConfusingSpecies = new Property(4, String.class, "confusingSpecies", false, "CONFUSING_SPECIES");
        public final static Property Characteristics = new Property(5, String.class, "characteristics", false, "CHARACTERISTICS");
    }


    public SaltWaterfishFactsDao(DaoConfig config) {
        super(config);
    }
    
    public SaltWaterfishFactsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SALT_WATERFISH_FACTS\" (" + //
                "\"SALT_ID\" TEXT," + // 0: SaltID
                "\"ID\" INTEGER," + // 1: id
                "\"ABOUT\" TEXT," + // 2: about
                "\"SIZE\" TEXT," + // 3: size
                "\"CONFUSING_SPECIES\" TEXT," + // 4: confusingSpecies
                "\"CHARACTERISTICS\" TEXT);"); // 5: characteristics
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SALT_WATERFISH_FACTS\"";
        db.execSQL(sql);
    }

    @Override
    protected void bindValues(DatabaseStatement stmt, SaltWaterfishFacts entity) {
        stmt.clearBindings();

        String SaltID = entity.getSaltID();
        if (SaltID != null) {
            stmt.bindString(1, SaltID);
        }

        Integer id = entity.getId();
        if (id != null) {
            stmt.bindLong(2, id);
        }

        String about = entity.getAbout();
        if (about != null) {
            stmt.bindString(3, about);
        }

        String size = entity.getSize();
        if (size != null) {
            stmt.bindString(4, size);
        }

        String confusingSpecies = entity.getConfusingSpecies();
        if (confusingSpecies != null) {
            stmt.bindString(5, confusingSpecies);
        }

        String characteristics = entity.getCharacteristics();
        if (characteristics != null) {
            stmt.bindString(6, characteristics);
        }
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SaltWaterfishFacts entity) {
        stmt.clearBindings();
 
        String SaltID = entity.getSaltID();
        if (SaltID != null) {
            stmt.bindString(1, SaltID);
        }
 
        Integer id = entity.getId();
        if (id != null) {
            stmt.bindLong(2, id);
        }
 
        String about = entity.getAbout();
        if (about != null) {
            stmt.bindString(3, about);
        }
 
        String size = entity.getSize();
        if (size != null) {
            stmt.bindString(4, size);
        }
 
        String confusingSpecies = entity.getConfusingSpecies();
        if (confusingSpecies != null) {
            stmt.bindString(5, confusingSpecies);
        }
 
        String characteristics = entity.getCharacteristics();
        if (characteristics != null) {
            stmt.bindString(6, characteristics);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public SaltWaterfishFacts readEntity(Cursor cursor, int offset) {
        SaltWaterfishFacts entity = new SaltWaterfishFacts( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // SaltID
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // about
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // size
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // confusingSpecies
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // characteristics
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SaltWaterfishFacts entity, int offset) {
        entity.setSaltID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setId(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setAbout(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSize(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setConfusingSpecies(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCharacteristics(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(SaltWaterfishFacts entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(SaltWaterfishFacts entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }

    @Override
    protected boolean hasKey(SaltWaterfishFacts entity) {
        return false;
    }
}
