package com.mobiddiction.fishsmart.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;



import com.mobiddiction.fishsmart.dao.FirstTimeLoad;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FIRST_TIME_LOAD".
*/
public class FirstTimeLoadDao extends AbstractDao<FirstTimeLoad, Void> {

    public static final String TABLENAME = "FIRST_TIME_LOAD";

    /**
     * Properties of entity FirstTimeLoad.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property IsFirstTimeLoad = new Property(0, Boolean.class, "isFirstTimeLoad", false, "IS_FIRST_TIME_LOAD");
    }


    public FirstTimeLoadDao(DaoConfig config) {
        super(config);
    }
    
    public FirstTimeLoadDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FIRST_TIME_LOAD\" (" + //
                "\"IS_FIRST_TIME_LOAD\" INTEGER);"); // 0: isFirstTimeLoad
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FIRST_TIME_LOAD\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, FirstTimeLoad entity) {
        stmt.clearBindings();
 
        Boolean isFirstTimeLoad = entity.getIsFirstTimeLoad();
        if (isFirstTimeLoad != null) {
            stmt.bindLong(1, isFirstTimeLoad ? 1L: 0L);
        }
    }

    @Override
    protected void bindValues(DatabaseStatement stmt, FirstTimeLoad entity) {
        stmt.clearBindings();

        Boolean isFirstTimeLoad = entity.getIsFirstTimeLoad();
        if (isFirstTimeLoad != null) {
            stmt.bindLong(1, isFirstTimeLoad ? 1L: 0L);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public FirstTimeLoad readEntity(Cursor cursor, int offset) {
        FirstTimeLoad entity = new FirstTimeLoad( //
            cursor.isNull(offset + 0) ? null : cursor.getShort(offset + 0) != 0 // isFirstTimeLoad
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, FirstTimeLoad entity, int offset) {
        entity.setIsFirstTimeLoad(cursor.isNull(offset + 0) ? null : cursor.getShort(offset + 0) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(FirstTimeLoad entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(FirstTimeLoad entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }

    @Override
    protected boolean hasKey(FirstTimeLoad entity) {
        return false;
    }
}
