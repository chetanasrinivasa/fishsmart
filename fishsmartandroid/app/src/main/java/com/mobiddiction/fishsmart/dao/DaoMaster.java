package com.mobiddiction.fishsmart.dao;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;

import com.mobiddiction.fishsmart.dao.FirstTimeLoadDao;
import com.mobiddiction.fishsmart.dao.DataDao;
import com.mobiddiction.fishsmart.dao.NEWSpeciesDataDao;
import com.mobiddiction.fishsmart.dao.SpeciesDataObjectDao;
import com.mobiddiction.fishsmart.dao.FreshDataNewDao;
import com.mobiddiction.fishsmart.dao.SaltDataNewDao;
import com.mobiddiction.fishsmart.dao.SaltWaterNewDataDao;
import com.mobiddiction.fishsmart.dao.SaltWaterfishGroupDao;
import com.mobiddiction.fishsmart.dao.SaltWaterfishFactsDao;
import com.mobiddiction.fishsmart.dao.SaltWaterrulesDao;
import com.mobiddiction.fishsmart.dao.FreshWaterNewDataDao;
import com.mobiddiction.fishsmart.dao.FreshWaterfishGroupDao;
import com.mobiddiction.fishsmart.dao.FreshWaterfishFactsDao;
import com.mobiddiction.fishsmart.dao.FreshWaterrulesDao;
import com.mobiddiction.fishsmart.dao.FreshDataDao;
import com.mobiddiction.fishsmart.dao.FreshDao;
import com.mobiddiction.fishsmart.dao.SaltDataDao;
import com.mobiddiction.fishsmart.dao.SaltDao;
import com.mobiddiction.fishsmart.dao.AllSpeciesDao;
import com.mobiddiction.fishsmart.dao.AllSpeciesGroupDao;
import com.mobiddiction.fishsmart.dao.AllSpeciesfishFactsDao;
import com.mobiddiction.fishsmart.dao.AllSpeciesrulesDao;
import com.mobiddiction.fishsmart.dao.LoginDetailDao;
import com.mobiddiction.fishsmart.dao.LoginResponseDao;
import com.mobiddiction.fishsmart.dao.OnboardingDao;
import com.mobiddiction.fishsmart.dao.TermAndConditionDao;
import com.mobiddiction.fishsmart.dao.PoliciesDao;
import com.mobiddiction.fishsmart.dao.SignUpDao;
import com.mobiddiction.fishsmart.dao.NewMapDao;
import com.mobiddiction.fishsmart.dao.NewMapDataDao;
import com.mobiddiction.fishsmart.dao.NewMapPinsLatLonDataDao;
import com.mobiddiction.fishsmart.dao.NewGuideDao;
import com.mobiddiction.fishsmart.dao.NewRulesGuideDao;
import com.mobiddiction.fishsmart.dao.NewListTypeModelDao;
import com.mobiddiction.fishsmart.dao.NewLicenceDao;
import com.mobiddiction.fishsmart.dao.NewLicenceDataDao;
import com.mobiddiction.fishsmart.dao.TermConditionVersionDao;
import com.mobiddiction.fishsmart.dao.GalleryDao;
import com.mobiddiction.fishsmart.dao.GalleryImageDao;
import com.mobiddiction.fishsmart.dao.NotificationDao;
import com.mobiddiction.fishsmart.dao.NotificationImageDao;
import com.mobiddiction.fishsmart.dao.NotificationDeviceDao;
import com.mobiddiction.fishsmart.dao.DeviceDataDao;
import com.mobiddiction.fishsmart.dao.UserObjDao;
import com.mobiddiction.fishsmart.dao.NotificationRolesDao;
import com.mobiddiction.fishsmart.dao.UserHistoryDao;

import org.greenrobot.greendao.AbstractDaoMaster;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.StandardDatabase;
import org.greenrobot.greendao.identityscope.IdentityScopeType;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * Master of DAO (schema version 40): knows all DAOs.
*/
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 40;

    /** Creates underlying database table using DAOs. */
    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
        FirstTimeLoadDao.createTable(db, ifNotExists);
        DataDao.createTable(db, ifNotExists);
        NEWSpeciesDataDao.createTable(db, ifNotExists);
        SpeciesDataObjectDao.createTable(db, ifNotExists);
        FreshDataNewDao.createTable(db, ifNotExists);
        SaltDataNewDao.createTable(db, ifNotExists);
        SaltWaterNewDataDao.createTable(db, ifNotExists);
        SaltWaterfishGroupDao.createTable(db, ifNotExists);
        SaltWaterfishFactsDao.createTable(db, ifNotExists);
        SaltWaterrulesDao.createTable(db, ifNotExists);
        FreshWaterNewDataDao.createTable(db, ifNotExists);
        FreshWaterfishGroupDao.createTable(db, ifNotExists);
        FreshWaterfishFactsDao.createTable(db, ifNotExists);
        FreshWaterrulesDao.createTable(db, ifNotExists);
        FreshDataDao.createTable(db, ifNotExists);
        FreshDao.createTable(db, ifNotExists);
        SaltDataDao.createTable(db, ifNotExists);
        SaltDao.createTable(db, ifNotExists);
        AllSpeciesDao.createTable(db, ifNotExists);
        AllSpeciesGroupDao.createTable(db, ifNotExists);
        AllSpeciesfishFactsDao.createTable(db, ifNotExists);
        AllSpeciesrulesDao.createTable(db, ifNotExists);
        LoginDetailDao.createTable(db, ifNotExists);
        LoginResponseDao.createTable(db, ifNotExists);
        OnboardingDao.createTable(db, ifNotExists);
        TermAndConditionDao.createTable(db, ifNotExists);
        PoliciesDao.createTable(db, ifNotExists);
        SignUpDao.createTable(db, ifNotExists);
        NewMapDao.createTable(db, ifNotExists);
        NewMapDataDao.createTable(db, ifNotExists);
        NewMapPinsLatLonDataDao.createTable(db, ifNotExists);
        NewGuideDao.createTable(db, ifNotExists);
        NewRulesGuideDao.createTable(db, ifNotExists);
        NewListTypeModelDao.createTable(db, ifNotExists);
        NewLicenceDao.createTable(db, ifNotExists);
        NewLicenceDataDao.createTable(db, ifNotExists);
        TermConditionVersionDao.createTable(db, ifNotExists);
        GalleryDao.createTable(db, ifNotExists);
        GalleryImageDao.createTable(db, ifNotExists);
        NotificationDao.createTable(db, ifNotExists);
        NotificationImageDao.createTable(db, ifNotExists);
        NotificationDeviceDao.createTable(db, ifNotExists);
        DeviceDataDao.createTable(db, ifNotExists);
        UserObjDao.createTable(db, ifNotExists);
        NotificationRolesDao.createTable(db, ifNotExists);
        UserHistoryDao.createTable(db, ifNotExists);
    }
    
    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
        FirstTimeLoadDao.dropTable(db, ifExists);
        DataDao.dropTable(db, ifExists);
        NEWSpeciesDataDao.dropTable(db, ifExists);
        SpeciesDataObjectDao.dropTable(db, ifExists);
        FreshDataNewDao.dropTable(db, ifExists);
        SaltDataNewDao.dropTable(db, ifExists);
        SaltWaterNewDataDao.dropTable(db, ifExists);
        SaltWaterfishGroupDao.dropTable(db, ifExists);
        SaltWaterfishFactsDao.dropTable(db, ifExists);
        SaltWaterrulesDao.dropTable(db, ifExists);
        FreshWaterNewDataDao.dropTable(db, ifExists);
        FreshWaterfishGroupDao.dropTable(db, ifExists);
        FreshWaterfishFactsDao.dropTable(db, ifExists);
        FreshWaterrulesDao.dropTable(db, ifExists);
        FreshDataDao.dropTable(db, ifExists);
        FreshDao.dropTable(db, ifExists);
        SaltDataDao.dropTable(db, ifExists);
        SaltDao.dropTable(db, ifExists);
        AllSpeciesDao.dropTable(db, ifExists);
        AllSpeciesGroupDao.dropTable(db, ifExists);
        AllSpeciesfishFactsDao.dropTable(db, ifExists);
        AllSpeciesrulesDao.dropTable(db, ifExists);
        LoginDetailDao.dropTable(db, ifExists);
        LoginResponseDao.dropTable(db, ifExists);
        OnboardingDao.dropTable(db, ifExists);
        TermAndConditionDao.dropTable(db, ifExists);
        PoliciesDao.dropTable(db, ifExists);
        SignUpDao.dropTable(db, ifExists);
        NewMapDao.dropTable(db, ifExists);
        NewMapDataDao.dropTable(db, ifExists);
        NewMapPinsLatLonDataDao.dropTable(db, ifExists);
        NewGuideDao.dropTable(db, ifExists);
        NewRulesGuideDao.dropTable(db, ifExists);
        NewListTypeModelDao.dropTable(db, ifExists);
        NewLicenceDao.dropTable(db, ifExists);
        NewLicenceDataDao.dropTable(db, ifExists);
        TermConditionVersionDao.dropTable(db, ifExists);
        GalleryDao.dropTable(db, ifExists);
        GalleryImageDao.dropTable(db, ifExists);
        NotificationDao.dropTable(db, ifExists);
        NotificationImageDao.dropTable(db, ifExists);
        NotificationDeviceDao.dropTable(db, ifExists);
        DeviceDataDao.dropTable(db, ifExists);
        UserObjDao.dropTable(db, ifExists);
        NotificationRolesDao.dropTable(db, ifExists);
        UserHistoryDao.dropTable(db, ifExists);
    }
    
    public static abstract class OpenHelper extends SQLiteOpenHelper {

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(SQLiteDatabase db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }
    }
    
    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class DevOpenHelper extends OpenHelper {
        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            dropAllTables(db, true);
            onCreate(db);
        }
    }

    public DaoMaster(SQLiteDatabase db) {
        this(new StandardDatabase(db));
    }

    public DaoMaster(Database db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(FirstTimeLoadDao.class);
        registerDaoClass(DataDao.class);
        registerDaoClass(NEWSpeciesDataDao.class);
        registerDaoClass(SpeciesDataObjectDao.class);
        registerDaoClass(FreshDataNewDao.class);
        registerDaoClass(SaltDataNewDao.class);
        registerDaoClass(SaltWaterNewDataDao.class);
        registerDaoClass(SaltWaterfishGroupDao.class);
        registerDaoClass(SaltWaterfishFactsDao.class);
        registerDaoClass(SaltWaterrulesDao.class);
        registerDaoClass(FreshWaterNewDataDao.class);
        registerDaoClass(FreshWaterfishGroupDao.class);
        registerDaoClass(FreshWaterfishFactsDao.class);
        registerDaoClass(FreshWaterrulesDao.class);
        registerDaoClass(FreshDataDao.class);
        registerDaoClass(FreshDao.class);
        registerDaoClass(SaltDataDao.class);
        registerDaoClass(SaltDao.class);
        registerDaoClass(AllSpeciesDao.class);
        registerDaoClass(AllSpeciesGroupDao.class);
        registerDaoClass(AllSpeciesfishFactsDao.class);
        registerDaoClass(AllSpeciesrulesDao.class);
        registerDaoClass(LoginDetailDao.class);
        registerDaoClass(LoginResponseDao.class);
        registerDaoClass(OnboardingDao.class);
        registerDaoClass(TermAndConditionDao.class);
        registerDaoClass(PoliciesDao.class);
        registerDaoClass(SignUpDao.class);
        registerDaoClass(NewMapDao.class);
        registerDaoClass(NewMapDataDao.class);
        registerDaoClass(NewMapPinsLatLonDataDao.class);
        registerDaoClass(NewGuideDao.class);
        registerDaoClass(NewRulesGuideDao.class);
        registerDaoClass(NewListTypeModelDao.class);
        registerDaoClass(NewLicenceDao.class);
        registerDaoClass(NewLicenceDataDao.class);
        registerDaoClass(TermConditionVersionDao.class);
        registerDaoClass(GalleryDao.class);
        registerDaoClass(GalleryImageDao.class);
        registerDaoClass(NotificationDao.class);
        registerDaoClass(NotificationImageDao.class);
        registerDaoClass(NotificationDeviceDao.class);
        registerDaoClass(DeviceDataDao.class);
        registerDaoClass(UserObjDao.class);
        registerDaoClass(NotificationRolesDao.class);
        registerDaoClass(UserHistoryDao.class);
    }
    
    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }
    
    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }
    
}
